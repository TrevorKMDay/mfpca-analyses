# index for each block
idx_end = idx_start = rep(0, P)
idx_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[p] = seq(idx_start[p], idx_end[p], 1)
}
P = length(K)
# index for each block
idx_end = idx_start = rep(0, P)
idx_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
}
idx_each
R
R[-c(3,4), -c(3,4)]
R[-5, -5]
R_out_v1 = R[-idx_each[[1]], -idx_each[[1]]]
R_out_v1
R_out_v2 = R[-idx_each[[2]], -idx_each[[2]]]
R_out_v2
P = length(K)
# index for each block
idx_end = idx_start = rep(0, P)
idx_each = R_out_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
R_out_each[[p]] = R[-idx_each[[p]], -idx_each[[p]]]
}
R
R_out_each
R = results_nsim$COR_true
#R = corr_matrix
P = length(K)
# index for each block (R_out_each: R after take out each variable; R_in_one: R of keep one variable = take out two if 3 in total)
idx_end = idx_start = rep(0, P)
idx_each = R_out_each = R_in_one = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
R_out_each[[p]] = R[-idx_each[[p]], -idx_each[[p]]]
R_in_one[[p]] = R[idx_each[[p]], idx_each[[p]]]
}
R
R_out_each
R_in_each
R = results_nsim$COR_true
#R = corr_matrix
P = length(K)
# index for each block (R_out_each: R after take out each variable; R_in_each: R of keep one variable = take out two if 3 in total)
idx_end = idx_start = rep(0, P)
idx_each = R_out_each = R_in_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
R_out_each[[p]] = R[-idx_each[[p]], -idx_each[[p]]]
R_in_each[[p]] = R[idx_each[[p]], idx_each[[p]]]
}
R_in_each
R
R_out_each
R
R_out_each[[2]]
R_out_each[[2]])
R_out_each[[2]]
R_out_each[[1]]
R_in_each[[3]]
R
MI_all = -1/2 * log(det(R))
MI_12 = 1/2 * log(det(R_out_each[[2]])) + 1/2 * log(det(R_out_each[[1]])) - 1/2 * log(det(R_in_each[[3]])) - 1/2 * log(det(R))
1/2 * log(det(R_out_each[[2]]))
1/2 * log(det(R_out_each[[1]]))
- 1/2 * log(det(R_in_each[[3]]))
det(1)
R_in_each[[3]]
det(1)
nrow(R_in_each[[3]])
dim(R_in_each[[3]])
if (dim(R_in_each[[3]]) is NULL){print('yes')}
if (dim(R_in_each[[3]]) == NULL){print('yes')}
if (is.null(dim(sub_corr)){print('yes')}
if (is.null(dim(sub_corr))print('yes')
is.null(dim(R_in_each[[3]]))
H_est = function(sub_corr){
if (is.null(dim(sub_corr)){
H_est = 1/2 * log(sub_corr))
}else{
H_est = 1/2 * log(det(sub_corr))
}
return(H_est)
}
H_est = function(sub_corr){
if (is.null(dim(sub_corr)){
H_est = 1/2 * log(sub_corr)
}else{
H_est = 1/2 * log(det(sub_corr))
}
return(H_est)
}
H_est = function(sub_corr){
if (is.null(dim(sub_corr))){
H_est = 1/2 * log(sub_corr)
}else{
H_est = 1/2 * log(det(sub_corr))
}
return(H_est)
}
H_est(R_out_each[[2]])
H_est(R_out_each[[1]])
1/2 * log(det(R_out_each[[1]]))
MI_12 = H_est(R_out_each[[2]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[3]]) - H_est(R)
MI_12
R
MI_all = -H_est(R)
MI_12 = H_est(R_out_each[[2]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[3]]) - H_est(R)
MI_13 = H_est(R_out_each[[3]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[2]]) - H_est(R)
MI_23 = H_est(R_out_each[[3]]) + H_est(R_out_each[[2]]) - H_est(R_in_each[[1]]) - H_est(R)
MI_all
MI_13
MI_12
MI_23
MI_norm = function(MI){
MI_norm = (1 - exp(-MI * 2 )) ^ (1/2)
return(MI_norm)
}
norm_MI_all = MI_norm(MI_all)
norm_MI_12 = MI_norm(MI_12)
norm_MI_13 = MI_norm(MI_13)
norm_MI_23 = MI_norm(MI_23)
norm_MI_all
norm_MI_12
norm_MI_13
norm_MI_23
file_summary_output='3D_est_all_R_v1_nsims1_summary.Rdata'
load(file_summary_output)
R = results_nsim$COR_true
H_est = function(sub_corr){
# calculate entropy
if (is.null(dim(sub_corr))){
H_est = 1/2 * log(sub_corr)
}else{
H_est = 1/2 * log(det(sub_corr))
}
return(H_est)
}
MI_norm = function(MI){
# normalize MI to be [0, 1]
MI_norm = (1 - exp(-MI * 2 )) ^ (1/2)
return(MI_norm)
}
MI_est = function(corr_matrix, K){
# calculate mutual informaion
R = corr_matrix
P = length(K)
# index for each block (R_out_each: R after take out each variable; R_in_each: R of keep one variable = take out two if 3 in total)
idx_end = idx_start = rep(0, P)
idx_each = R_out_each = R_in_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
R_out_each[[p]] = R[-idx_each[[p]], -idx_each[[p]]]
R_in_each[[p]] = R[idx_each[[p]], idx_each[[p]]]
}
# mutual information
MI_all = -H_est(R)
MI_12 = H_est(R_out_each[[2]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[3]]) - H_est(R)
MI_13 = H_est(R_out_each[[3]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[2]]) - H_est(R)
MI_23 = H_est(R_out_each[[3]]) + H_est(R_out_each[[2]]) - H_est(R_in_each[[1]]) - H_est(R)
# normalized mutual information
norm_MI_all = MI_norm(MI_all)
norm_MI_12 = MI_norm(MI_12)
norm_MI_13 = MI_norm(MI_13)
norm_MI_23 = MI_norm(MI_23)
return(list('MI_all'=MI_all, 'MI_12'=MI_12, 'MI_13'=MI_13, 'MI_23'=MI_23,
'norm_MI_all'=norm_MI_all, 'norm_MI_12'=norm_MI_12,
'norm_MI_13'=norm_MI_13, 'norm_MI_23'=norm_MI_23))
}
R
MI_true_results = MI_est(R)
# calculate mutual information from simulation replicates
file_summary_output='3D_est_all_R_v1_nsims1_summary.Rdata'
load(file_summary_output)
R = results_nsim$COR_true
K = dat_new$num_PCs
# true MIs
MI_true_results = MI_est(R)
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
results_nsim = output_sim(mfpca_output='3D_est_all_R_v1_nsims1.Rdata',
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata",
idx_sim=1, mean_lim=c(-15,15), FPC_lim=c(-5,5),
fig_name='3D_est_all_R_v1_nsims1.tiff')
save(results_nsim, file='3D_est_all_R_v1_nsims1_summary.Rdata')
H_est = function(sub_corr){
# calculate entropy
if (is.null(dim(sub_corr))){
H_est = 1/2 * log(sub_corr)
}else{
H_est = 1/2 * log(det(sub_corr))
}
return(H_est)
}
MI_norm = function(MI){
# normalize MI to be [0, 1]
MI_norm = (1 - exp(-MI * 2 )) ^ (1/2)
return(MI_norm)
}
MI_est = function(corr_matrix, K){
# calculate mutual informaion
R = corr_matrix
P = length(K)
# index for each block (R_out_each: R after take out each variable; R_in_each: R of keep one variable = take out two if 3 in total)
idx_end = idx_start = rep(0, P)
idx_each = R_out_each = R_in_each = list()
for (p in 1:P){
idx_end[p] = sum(K[1:p])
idx_start[p] = idx_end[p] - K[p] + 1
idx_each[[p]] = seq(idx_start[p], idx_end[p], 1)
R_out_each[[p]] = R[-idx_each[[p]], -idx_each[[p]]]
R_in_each[[p]] = R[idx_each[[p]], idx_each[[p]]]
}
# mutual information
MI_all = -H_est(R)
MI_12 = H_est(R_out_each[[2]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[3]]) - H_est(R)
MI_13 = H_est(R_out_each[[3]]) + H_est(R_out_each[[1]]) - H_est(R_in_each[[2]]) - H_est(R)
MI_23 = H_est(R_out_each[[3]]) + H_est(R_out_each[[2]]) - H_est(R_in_each[[1]]) - H_est(R)
# normalized mutual information
norm_MI_all = MI_norm(MI_all)
norm_MI_12 = MI_norm(MI_12)
norm_MI_13 = MI_norm(MI_13)
norm_MI_23 = MI_norm(MI_23)
return(list('MI_all'=MI_all, 'MI_12'=MI_12, 'MI_13'=MI_13, 'MI_23'=MI_23,
'norm_MI_all'=norm_MI_all, 'norm_MI_12'=norm_MI_12,
'norm_MI_13'=norm_MI_13, 'norm_MI_23'=norm_MI_23))
}
file_summary_output='3D_est_all_R_v1_nsims1_summary.Rdata'
load(file_summary_output)
R = results_nsim$COR_true
K = dat_new$num_PCs
# true MIs
MI_true_results = MI_est(R)
results_nsim$K
MI_true_results = MI_est(corr_matrix=R, K=K)
R = results_nsim$COR_true
K = results_nsim$K
# true MIs
MI_true_results = MI_est(corr_matrix=R, K=K)
MI_true_results
names(results_nsim$results)
results_nsim$results$COR_median
MI_median_results = MI_est(corr_matrix=results_nsim$results$COR_median, K=K)
MI_q025_results = MI_est(corr_matrix=results_nsim$results$COR_q025, K=K)
MI_q975_results = MI_est(corr_matrix=results_nsim$results$COR_q975, K=K)
MI_median_results
MI_true_results
MI_q025_results
MI_q975_results
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
mfpca_output='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
R_array = post_rotation_results$COR_array
R_array[,,1]
R_array[,,2]
dim(R_array)
names(dat)
dat$sim_param
dat$sim_param$Q
R_array[,,1]
mfpca_output ='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
R=dat$sim_param$params[[3]]
K = dat$sim_param$Q
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
R_array = post_rotation_results$COR_array
MI_true_results = MI_est(corr_matrix=R, K=K)
nloop = dim(R_array)[3]
MI_all = MI_12 = MI_13 = MI_23 = norm_MI_all = norm_MI_12 = norm_MI_13 = norm_MI_23 rep(0, nloop)
for (i in 1:nloop){
MI_results = MI_est(corr_matrix=R_array[,,i], K=K)
# store original mutual info
MI_all[i] = MI_results$MI_all
MI_12[i] = MI_results$MI_12
MI_13[i] = MI_results$MI_13
MI_23[i] = MI_results$MI_23
# store normalized mutual info
norm_MI_all[i] = norm_MI_results$MI_all
norm_MI_12[i] = norm_MI_results$MI_12
norm_MI_13[i] = norm_MI_results$MI_13
norm_MI_23[i] = norm_MI_results$MI_23
}
MI_all_list = c(mean(MI_all), quantile(MI_all, 0.5), quantile(MI_all, 0.025), quantile(MI_all, 0.975))
MI_12_list = c(mean(MI_12), quantile(MI_12, 0.5), quantile(MI_12, 0.025), quantile(MI_12, 0.975))
MI_13_list = c(mean(MI_13), quantile(MI_13, 0.5), quantile(MI_13, 0.025), quantile(MI_13, 0.975))
MI_23_list = c(mean(MI_23), quantile(MI_23, 0.5), quantile(MI_23, 0.025), quantile(MI_23, 0.975))
norm_MI_all_list = c(mean(norm_MI_all), quantile(norm_MI_all, 0.5),
quantile(norm_MI_all, 0.025), quantile(norm_MI_all, 0.975))
norm_MI_12_list = c(mean(norm_MI_12), quantile(norm_MI_12, 0.5),
quantile(norm_MI_12, 0.025), quantile(norm_MI_12, 0.975))
norm_MI_13_list = c(mean(norm_MI_13), quantile(norm_MI_13, 0.5),
quantile(norm_MI_13, 0.025), quantile(norm_MI_13, 0.975))
norm_MI_23_list = c(mean(norm_MI_23), quantile(norm_MI_23, 0.5),
quantile(norm_MI_23, 0.025), quantile(norm_MI_23, 0.975))
nloop = dim(R_array)[3]
MI_all = MI_12 = MI_13 = MI_23 = norm_MI_all = norm_MI_12 = norm_MI_13 = norm_MI_23 = rep(0, nloop)
for (i in 1:nloop){
MI_results = MI_est(corr_matrix=R_array[,,i], K=K)
# store original mutual info
MI_all[i] = MI_results$MI_all
MI_12[i] = MI_results$MI_12
MI_13[i] = MI_results$MI_13
MI_23[i] = MI_results$MI_23
# store normalized mutual info
norm_MI_all[i] = norm_MI_results$MI_all
norm_MI_12[i] = norm_MI_results$MI_12
norm_MI_13[i] = norm_MI_results$MI_13
norm_MI_23[i] = norm_MI_results$MI_23
}
MI_all_list = c(mean(MI_all), quantile(MI_all, 0.5), quantile(MI_all, 0.025), quantile(MI_all, 0.975))
MI_12_list = c(mean(MI_12), quantile(MI_12, 0.5), quantile(MI_12, 0.025), quantile(MI_12, 0.975))
MI_13_list = c(mean(MI_13), quantile(MI_13, 0.5), quantile(MI_13, 0.025), quantile(MI_13, 0.975))
MI_23_list = c(mean(MI_23), quantile(MI_23, 0.5), quantile(MI_23, 0.025), quantile(MI_23, 0.975))
norm_MI_all_list = c(mean(norm_MI_all), quantile(norm_MI_all, 0.5),
quantile(norm_MI_all, 0.025), quantile(norm_MI_all, 0.975))
norm_MI_12_list = c(mean(norm_MI_12), quantile(norm_MI_12, 0.5),
quantile(norm_MI_12, 0.025), quantile(norm_MI_12, 0.975))
norm_MI_13_list = c(mean(norm_MI_13), quantile(norm_MI_13, 0.5),
quantile(norm_MI_13, 0.025), quantile(norm_MI_13, 0.975))
norm_MI_23_list = c(mean(norm_MI_23), quantile(norm_MI_23, 0.5),
quantile(norm_MI_23, 0.025), quantile(norm_MI_23, 0.975))
mfpca_output ='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
R=dat$sim_param$params[[3]]
K = dat$sim_param$Q
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
R_array = post_rotation_results$COR_array
MI_true_results = MI_est(corr_matrix=R, K=K)
nloop = dim(R_array)[3]
MI_all = MI_12 = MI_13 = MI_23 = norm_MI_all = norm_MI_12 = norm_MI_13 = norm_MI_23 = rep(0, nloop)
i = 1
MI_results = MI_est(corr_matrix=R_array[,,i], K=K)
MI_results
MI_all[i] = MI_results$MI_all
MI_all[i] = MI_results$MI_all
MI_12[i] = MI_results$MI_12
MI_13[i] = MI_results$MI_13
MI_23[i] = MI_results$MI_23
# store normalized mutual info
norm_MI_all[i] = MI_results$norm_MI_all
norm_MI_12[i] = MI_results$norm_MI_12
norm_MI_13[i] = MI_results$norm_MI_13
norm_MI_23[i] = MI_results$norm_MI_23
mfpca_output ='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
R=dat$sim_param$params[[3]]
K = dat$sim_param$Q
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
R_array = post_rotation_results$COR_array
MI_true_results = MI_est(corr_matrix=R, K=K)
nloop = dim(R_array)[3]
MI_all = MI_12 = MI_13 = MI_23 = norm_MI_all = norm_MI_12 = norm_MI_13 = norm_MI_23 = rep(0, nloop)
for (i in 1:nloop){
MI_results = MI_est(corr_matrix=R_array[,,i], K=K)
# store original mutual info
MI_all[i] = MI_results$MI_all
MI_12[i] = MI_results$MI_12
MI_13[i] = MI_results$MI_13
MI_23[i] = MI_results$MI_23
# store normalized mutual info
norm_MI_all[i] = MI_results$norm_MI_all
norm_MI_12[i] = MI_results$norm_MI_12
norm_MI_13[i] = MI_results$norm_MI_13
norm_MI_23[i] = MI_results$norm_MI_23
}
MI_all_list = c(mean(MI_all), quantile(MI_all, 0.5), quantile(MI_all, 0.025), quantile(MI_all, 0.975))
MI_12_list = c(mean(MI_12), quantile(MI_12, 0.5), quantile(MI_12, 0.025), quantile(MI_12, 0.975))
MI_13_list = c(mean(MI_13), quantile(MI_13, 0.5), quantile(MI_13, 0.025), quantile(MI_13, 0.975))
MI_23_list = c(mean(MI_23), quantile(MI_23, 0.5), quantile(MI_23, 0.025), quantile(MI_23, 0.975))
norm_MI_all_list = c(mean(norm_MI_all), quantile(norm_MI_all, 0.5),
quantile(norm_MI_all, 0.025), quantile(norm_MI_all, 0.975))
norm_MI_12_list = c(mean(norm_MI_12), quantile(norm_MI_12, 0.5),
quantile(norm_MI_12, 0.025), quantile(norm_MI_12, 0.975))
norm_MI_13_list = c(mean(norm_MI_13), quantile(norm_MI_13, 0.5),
quantile(norm_MI_13, 0.025), quantile(norm_MI_13, 0.975))
norm_MI_23_list = c(mean(norm_MI_23), quantile(norm_MI_23, 0.5),
quantile(norm_MI_23, 0.025), quantile(norm_MI_23, 0.975))
MI_all_list
MI_12_list
MI_13_list
MI_14_list
MI_23_list
MI_true_results
MI_all_list
MI_12_list
MI_13_list
MI_23_list
norm_MI_all_list
norm_MI_12_list
norm_MI_13_list
norm_MI_23_list
mfpca_output ='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
R=dat$sim_param$params[[3]]
K = dat$sim_param$Q
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
mfpca_output ='3D_est_all_R_v1_nsims1.Rdata';
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata";
load(mfpca_output)
load(dat_sim, dat <- new.env())
R=dat$sim_param$params[[3]]
K = dat$sim_param$Q
post_rotation_results = post_hoc_rotation(fit=fit, Nchains=Nchains, Nsamples=Nsamples, N=dat_new$num_subjects,
P=dat_new$num_blocks, K=dat_new$num_PCs, Q=dat_new$num_basis)
results = MI_est_sim(post_rotation_results, K=K)
names(results)
results$MI_true_results
results$MI_all_list
results$MI_12_list
results$MI_13_list
results$MI_23_list
results$norm_MI_all_list
results$norm_MI_12_list
results$norm_MI_13_list
results$norm_MI_23_list
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
results_nsim = output_sim(mfpca_output='3D_est_all_R_v1_nsims1.Rdata',
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata",
idx_sim=1, mean_lim=c(-15,15), FPC_lim=c(-5,5),
fig_name='3D_est_all_R_v1_nsims1.tiff')
names(results_nsim)
results_nsim$results
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
results_nsim = output_sim(mfpca_output='3D_est_all_R_v1_nsims1.Rdata',
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata",
idx_sim=1, mean_lim=c(-15,15), FPC_lim=c(-5,5),
fig_name='3D_est_all_R_v1_nsims1.tiff')
save(results_nsim, file='3D_est_all_R_v1_nsims1_summary.Rdata')
names(results_nsim)
results_nism$est_resu
results_nism$est_results
results_nsim$est_results
names(results_nsim)
results_nsim$MI_results
names(results_nsim)
results_nsim$COV_true
results_nsim$COR_true
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
results_nsim = output_sim(mfpca_output='3D_est_all_R_v1_nsims1.Rdata',
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata",
idx_sim=1, mean_lim=c(-15,15), FPC_lim=c(-5,5),
fig_name='3D_est_all_R_v1_nsims1.tiff')
save(results_nsim, file='3D_est_all_R_v1_nsims1_summary.Rdata')
source('mfpca_rotation_v2.R')
source('sim_settings_v2.R') # for plotting figures
source('basis_setup_sparse.R')
results_nsim = output_sim(mfpca_output='3D_est_all_R_v1_nsims1.Rdata',
dat_sim =  "sim_dat_3B_N_100_R_corr_1_Complete_0.8.Rdata",
idx_sim=1, mean_lim=c(-15,15), FPC_lim=c(-5,5),
fig_name='3D_est_all_R_v1_nsims1.tiff')
save(results_nsim, file='3D_est_all_R_v1_nsims1_summary.Rdata')
names(results_nsim)
results_nsim$est_results
results_nsim$MI_results
setwd("~/Study/thesis/Bayesian/mfpca/applications/Amina_skin/code")
microb = read.csv('../data/data_alphas_concise.txt', sep='\t')
colnames(microb) = c('SampleID', 'Subject', 'Timepoint', 'Shannon_microb',
'BodySite', 'Sex', 'ID_unique', 'Avg_Shannon_microb')
metab = read.csv('../data/data_metab_shannon.txt', sep='\t')
colnames(metab) = c('SampleID', 'Subject', 'Timepoint', 'Shannon_metab',
'BodySite', 'Sex', 'ID_unique', 'Avg_Shannon_metab')
head(microb)
head(metab)
dim(microb)
dim(metab)
122.34+204.06-275.34
load('../results/mfpca_skin_stan.RData')
